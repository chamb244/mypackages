
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "myf"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('myf')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("area_circle")
> ### * area_circle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: area_circle
> ### Title: Area of a circle
> ### Aliases: area_circle
> ### Keywords: spatial
> 
> ### ** Examples
> 
>  
> area_circle(5)
[1] 78.53982
> 
> 
> ## The function is currently defined as
> function (radius) 
+ {
+     if (!is.numeric(radius)) {
+         warning("radius must be numeric")
+         return(NA)
+     }
+     if (radius < 0) {
+         warning("radius must be a positive value")
+         return(NA)
+     }
+     area <- pi * radius * radius
+     return(area)
+   }
function (radius) 
{
    if (!is.numeric(radius)) {
        warning("radius must be numeric")
        return(NA)
    }
    if (radius < 0) {
        warning("radius must be a positive value")
        return(NA)
    }
    area <- pi * radius * radius
    return(area)
}
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.03 0 0.1 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
